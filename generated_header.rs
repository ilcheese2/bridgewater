/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenVector<T: Copy, const N: usize, const A: usize>(pub [T; N], [u8; A]);
impl<T: Copy + Default, const N: usize, const A: usize> Default for __BindgenVector<T, N, A> {
    fn default() -> Self {
        Self([<T as Default>::default(); N], [0; A])
    }
}
impl<T: Copy + Default, const N: usize, const A: usize> std::ops::Deref
    for __BindgenVector<T, N, A>
{
    type Target = [T; N];
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<T: Copy + Default, const N: usize, const A: usize> __BindgenVector<T, N, A> {
    pub fn new(v: [T; N]) -> Self {
        Self(v, [0; A])
    }
}
pub type simd_float3 = __BindgenVector<f32, 3usize, 4usize>;
pub type vector_float3 = simd_float3;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct Particle {
    pub position: vector_float3,
    pub velocity: vector_float3,
    pub pred_velocity: vector_float3,
    pub force: vector_float3,
    pub density: f32,
    pub density_derivative: f32,
    pub pred_density: f32,
    pub factor: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Particle"][::std::mem::size_of::<Particle>() - 80usize];
    ["Alignment of Particle"][::std::mem::align_of::<Particle>() - 16usize];
    ["Offset of field: Particle::position"][::std::mem::offset_of!(Particle, position) - 0usize];
    ["Offset of field: Particle::velocity"][::std::mem::offset_of!(Particle, velocity) - 16usize];
    ["Offset of field: Particle::pred_velocity"]
        [::std::mem::offset_of!(Particle, pred_velocity) - 32usize];
    ["Offset of field: Particle::force"][::std::mem::offset_of!(Particle, force) - 48usize];
    ["Offset of field: Particle::density"][::std::mem::offset_of!(Particle, density) - 64usize];
    ["Offset of field: Particle::density_derivative"]
        [::std::mem::offset_of!(Particle, density_derivative) - 68usize];
    ["Offset of field: Particle::pred_density"]
        [::std::mem::offset_of!(Particle, pred_density) - 72usize];
    ["Offset of field: Particle::factor"][::std::mem::offset_of!(Particle, factor) - 76usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ComputeArguments {
    pub kernel_radius: f32,
    pub mass: f32,
    pub num_particles: ::std::os::raw::c_int,
    pub rest_density: f32,
    pub time_step: u32,
    pub avg_density_derivative: f32,
    pub avg_pred_density: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ComputeArguments"][::std::mem::size_of::<ComputeArguments>() - 28usize];
    ["Alignment of ComputeArguments"][::std::mem::align_of::<ComputeArguments>() - 4usize];
    ["Offset of field: ComputeArguments::kernel_radius"]
        [::std::mem::offset_of!(ComputeArguments, kernel_radius) - 0usize];
    ["Offset of field: ComputeArguments::mass"]
        [::std::mem::offset_of!(ComputeArguments, mass) - 4usize];
    ["Offset of field: ComputeArguments::num_particles"]
        [::std::mem::offset_of!(ComputeArguments, num_particles) - 8usize];
    ["Offset of field: ComputeArguments::rest_density"]
        [::std::mem::offset_of!(ComputeArguments, rest_density) - 12usize];
    ["Offset of field: ComputeArguments::time_step"]
        [::std::mem::offset_of!(ComputeArguments, time_step) - 16usize];
    ["Offset of field: ComputeArguments::avg_density_derivative"]
        [::std::mem::offset_of!(ComputeArguments, avg_density_derivative) - 20usize];
    ["Offset of field: ComputeArguments::avg_pred_density"]
        [::std::mem::offset_of!(ComputeArguments, avg_pred_density) - 24usize];
};
